syntax = "proto3";
package io.bisq.protobuffer;

//
// Protobuffer v3 definitions of WIRE and PERSISTED messages.
//

option java_package = "io.bisq.generated.protobuffer";
option java_outer_classname = "PB";


///////////////////////////////////////////////////////////////////////////////////////////
// P2P network messages
///////////////////////////////////////////////////////////////////////////////////////////

message Msg {
    int32 msg_version = 1;
    oneof message {
        PreliminaryGetDataRequest preliminary_get_data_request = 2;
        GetDataResponse get_data_response = 3;
        GetUpdatedDataRequest get_updated_data_request = 4;
       
        GetPeersRequest get_peers_request = 5;
        GetPeersResponse get_peers_response = 6;
        Ping ping = 7;
        Pong pong = 8;
       
        OfferAvailabilityRequest offer_availability_request = 9;
        OfferAvailabilityResponse offer_availability_response = 10;
        RefreshTTLMessage refresh_ttl_message = 11;
         
        AddDataMessage add_data_message = 12;
        RemoveDataMessage remove_data_message = 13;
        RemoveMailboxDataMessage remove_mailbox_data_message = 14;
        
        CloseConnectionMessage close_connection_message = 15;
        PrefixedSealedAndSignedMessage prefixed_sealed_and_signed_message = 16;
        
        PayDepositRequest pay_deposit_request = 17;
        DepositTxPublishedMessage deposit_tx_published_message = 18;
        PublishDepositTxRequest publish_deposit_tx_request = 19;
        FiatTransferStartedMessage fiat_transfer_started_message = 20;
        FinalizePayoutTxRequest finalize_payout_tx_request = 21;
        PayoutTxPublishedMessage payout_tx_published_message = 22;
        PeerPublishedPayoutTxMessage peer_published_payout_tx_message = 23;
       
        OpenNewDisputeMessage open_new_dispute_message = 24;
        PeerOpenedDisputeMessage peer_opened_dispute_message = 25;
        DisputeCommunicationMessage dispute_communication_message = 26;
        DisputeResultMessage dispute_result_message = 27;
      
        PrivateNotificationMessage private_notification_message = 28;
      
        GetBsqBlocksRequest get_bsq_blocks_request = 29;
        GetBsqBlocksResponse get_bsq_blocks_response = 30;
        NewBsqBlockBroadcastMsg new_bsq_block_broadcast_msg = 31;
    }
}


///////////////////////////////////////////////////////////////////////////////////////////
// Implementations of Msg
///////////////////////////////////////////////////////////////////////////////////////////

// get data

message PreliminaryGetDataRequest {
    int32 message_version = 1;
    int32 nonce = 2;
    repeated bytes excluded_keys = 3;
    repeated int32 supported_capabilities = 4;
}

message GetDataResponse {
    int32 message_version = 1;
    int32 request_nonce = 2;
    bool is_get_updated_data_response = 3;
    repeated ProtectedStorageEntryOrProtectedMailboxStorageEntry data_set = 4;
    repeated int32 supported_capabilities = 5;
}

message GetUpdatedDataRequest {
    int32 message_version = 1;
    NodeAddress sender_node_address = 2;
    int32 nonce = 3;
    repeated bytes excluded_keys = 4;
}


// peers

message GetPeersRequest {
    int32 message_version = 1;
    NodeAddress sender_node_address = 2;
    int32 nonce = 3;
    repeated int32 supported_capabilities = 4;
    repeated Peer reported_peers = 5;
}

message GetPeersResponse {
    int32 message_version = 1;
    int32 request_nonce = 2;
    repeated Peer reported_peers = 3;
    repeated int32 supported_capabilities = 5;
}

message Ping {
    int32 nonce = 1;
    int32 last_round_trip_time = 2;
}

message Pong {
    int32 request_nonce = 1;
}


// offer

message OfferAvailabilityRequest {
    int32 message_version = 1;
    string offer_id = 2;
    PubKeyRing pub_key_ring = 3;
    int64 takers_trade_price = 4;
    repeated int32 supported_capabilities = 5;
}

message OfferAvailabilityResponse {
    int32 message_version = 1;
    string offer_id = 2;
    AvailabilityResult availability_result = 3;
    repeated int32 supported_capabilities = 4;
}

message RefreshTTLMessage {
    bytes hash_of_data_and_seq_nr = 1; // 32 bytes
    bytes signature = 2; // 46 bytes
    bytes hash_of_payload = 3; // 32 bytes
    int32 sequence_number = 4; // 4 bytes
}


// storage

message AddDataMessage {
    ProtectedStorageEntryOrProtectedMailboxStorageEntry entry = 1;
}

message RemoveDataMessage {
    ProtectedStorageEntry protected_storage_entry = 1;
}

message RemoveMailboxDataMessage {
    ProtectedMailboxStorageEntry protected_storage_entry = 1;
}


// misc

message CloseConnectionMessage {
    int32 message_version = 1;
    string reason = 2;
}

message PrefixedSealedAndSignedMessage {
    int32 message_version = 1;
    NodeAddress node_address = 2;
    SealedAndSigned sealed_and_signed = 3;
    bytes address_prefix_hash = 4;
    string uid = 5;
}


// trade

message PayDepositRequest {
    string trade_id = 1;
    int64 trade_amount = 2;
    int64 trade_price = 3;
    bytes taker_multi_sig_pub_key = 4;
    int64 tx_fee = 5;
    int64 taker_fee = 6;
    repeated RawTransactionInput raw_transaction_inputs = 7;
    int64 change_output_value = 8;
    string change_output_address = 9;
    string taker_payout_address_string = 10;
    PubKeyRing taker_pub_key_ring = 11;
    PaymentAccountPayload taker_payment_account_payload = 12;
    string taker_account_id = 13;
    string taker_fee_tx_id = 14;
    repeated NodeAddress accepted_arbitrator_node_addresses = 15;
    repeated NodeAddress accepted_mediator_node_addresses = 16;
    NodeAddress arbitrator_node_address = 17;
    NodeAddress mediator_node_address = 18;
    NodeAddress sender_node_address = 19;
    bool is_currency_for_taker_fee_btc = 20;
}

message DepositTxPublishedMessage {
    int32 message_version = 1;
    string trade_id = 2;
    bytes deposit_tx = 3;
    NodeAddress sender_node_address = 4;
    string uid = 5;
}

message PublishDepositTxRequest {
    int32 message_version = 1;
    string trade_id = 2;
    PaymentAccountPayload maker_payment_account_payload = 3;
    string maker_account_id = 4;
    string maker_contract_as_json = 5;
    string maker_contract_signature = 6;
    string maker_payout_address_string = 7;
    bytes prepared_deposit_tx = 8;
    repeated RawTransactionInput maker_inputs = 9;
    bytes maker_multi_sig_pub_key = 10;
    NodeAddress sender_node_address = 11;
    string uid = 12;
}

message FiatTransferStartedMessage {
    int32 message_version = 1;
    string trade_id = 2;
    string buyer_payout_address = 3;
    NodeAddress sender_node_address = 4;
    bytes buyer_signature = 5;
    string uid = 6;
}

message FinalizePayoutTxRequest {
    int32 message_version = 1;
    string trade_id = 2;
    bytes seller_signature = 3;
    string seller_payout_address = 4;
    NodeAddress sender_node_address = 5;
    string uid = 6;
}

message PayoutTxPublishedMessage {
    string uid = 1;
    int32 message_version = 2;
    string trade_id = 3;
    bytes payout_tx = 4;
    NodeAddress sender_node_address = 5;
}

message PeerPublishedPayoutTxMessage {
    bytes transaction = 1;
    string trade_id = 2;
    NodeAddress my_node_address = 3;
    string uid = 4;
}


// dispute

message OpenNewDisputeMessage {
    Dispute dispute = 1;
    NodeAddress my_node_address = 2;
    string uid = 3;
}

message PeerOpenedDisputeMessage {
    Dispute dispute = 1;
    NodeAddress my_node_address = 2;
    string uid = 3;
}

message DisputeCommunicationMessage {
    int64 date = 1;
    string trade_id = 2;
    int32 trader_id = 3;
    bool sender_is_trader = 4;
    string message = 5;
    repeated Attachment attachments = 6;
    bool arrived = 7;
    bool stored_in_mailbox = 8;
    bool is_system_message = 9;
    NodeAddress my_node_address = 10;
    string uid = 11;
}

message DisputeResultMessage {
    string uid = 1;
    DisputeResult dispute_result = 2;
    NodeAddress my_node_address = 3;
}


message PrivateNotificationMessage {
    int32 message_version = 1;
    string uid = 2;
    NodeAddress my_node_address = 3;
    PrivateNotificationPayload private_notification_payload = 4;
}


// DAO

message GetBsqBlocksRequest {
    int32 from_block_height = 1;
}

message GetBsqBlocksResponse {
    bytes bsq_blocks_bytes = 1;
}

message NewBsqBlockBroadcastMsg {
    bytes bsq_block_bytes = 1;
}




///////////////////////////////////////////////////////////////////////////////////////////
// Payload
///////////////////////////////////////////////////////////////////////////////////////////

// core

message NodeAddress {
    string host_name = 1;
    int32 port = 2;
}

message Peer {
    NodeAddress node_address = 1;
    int64 date = 2;
}

message PubKeyRing {
    bytes signature_pub_key_bytes = 1;
    bytes encryption_pub_key_bytes = 2;
    string pgp_pub_key_as_pem = 3;
}

message SealedAndSigned {
    bytes encrypted_secret_key = 1;
    bytes encrypted_payload_with_hmac = 2;
    bytes signature = 3;
    bytes sig_public_key_bytes = 4;
}


// storage

message StoragePayload {
    oneof message {
        Alert alert = 1;
        Arbitrator arbitrator = 2;
        Mediator mediator = 3;
        Filter filter = 4;
        CompensationRequestPayload compensation_request_payload = 5;
        TradeStatistics trade_statistics = 6;
        MailboxStoragePayload mailbox_storage_payload = 7;
        OfferPayload offer_payload = 8;
    }
}

message ProtectedStorageEntry {
    StoragePayload storagePayload = 1;
    bytes owner_pub_key_bytes = 2;
    int32 sequence_number = 3;
    bytes signature = 4;
    int64 creation_time_stamp = 5;
}


// mailbox

message ProtectedStorageEntryOrProtectedMailboxStorageEntry {
    oneof message {
        ProtectedStorageEntry protected_storage_entry = 1;
        ProtectedMailboxStorageEntry protected_mailbox_storage_entry = 2;
    }
}

message ProtectedMailboxStorageEntry {
    ProtectedStorageEntry entry = 1;
    bytes receivers_pub_key_bytes = 2;
}

message DataAndSeqNrPair {
    StoragePayload payload = 1;
    int32 sequence_number = 2;
}


///////////////////////////////////////////////////////////////////////////////////////////
// Storage payload
///////////////////////////////////////////////////////////////////////////////////////////

message Alert {
    string message = 1;
    string version = 2;
    bool is_update_info = 3;
    string signature_as_base64 = 4;
    bytes storage_public_key_bytes = 5;
    map<string, string> extra_data_map = 6;
}

message Arbitrator {
    NodeAddress node_address = 1;
    repeated string language_codes = 2;
    int64 registration_date = 3;
    bytes registration_signature = 4;
    bytes registration_pub_key = 5;
    PubKeyRing pub_key_ring = 6;
    bytes btc_pub_key = 7;
    string btc_address = 8;
    string email_address = 9;
    map<string, string> extra_data_map = 10;
}

message Mediator {
    NodeAddress node_address = 1;
    repeated string language_codes = 2;
    int64 registration_date = 3;
    string registration_signature = 4;
    bytes registration_pub_key = 5;
    PubKeyRing pub_key_ring = 6;
    string email_address = 7;
    string info = 8;
    map<string, string> extra_data_map = 9;
}

message Filter {
    repeated string banned_node_address = 1;
    repeated string banned_offer_ids = 2;
    repeated PaymentAccountFilter banned_payment_accounts = 3;
    string signature_as_base64 = 4;
    bytes public_key_bytes = 5;
    map<string, string> extra_data_map = 6;
}

message PaymentAccountFilter {
    string payment_method_id = 1;
    string get_method_name = 2;
    string value = 3;
}

message CompensationRequestPayload {
    uint32 version = 1;
    int64 creation_date = 2;
    string uid = 3;
    string name = 4;
    string title = 5;
    string category = 6;
    string description = 7;
    string link = 8;
    int64 start_date = 9;
    int64 end_date = 10;
    int64 requested_btc = 11;
    string btc_address = 12;
    string node_address = 13;
    bytes p2p_storage_signature_pub_key_bytes = 14;
    string p2p_storage_signature_pub_key_as_hex = 15;
    string signature = 16;
    string fee_tx_id = 17;
    map<string, string> extra_data_map = 18;
}

message TradeStatistics {
    string base_currency = 1;
    string counter_currency = 2;
    OfferPayload.Direction direction = 3;
    int64 trade_price = 4;
    int64 trade_amount = 5;
    int64 trade_date = 6;
    string payment_method_id = 7;
    int64 offer_date = 8;
    bool use_market_based_price = 9;
    double market_price_margin = 10;
    int64 offer_amount = 11;
    int64 offer_min_amount = 12;
    string offer_id = 13;
    string deposit_tx_id = 14;
    PubKeyRing pub_key_ring = 15;
    map<string, string> extra_data_map = 16;
}


message MailboxStoragePayload {
    PrefixedSealedAndSignedMessage prefixed_sealed_and_signed_message = 1;
    bytes sender_pub_key_for_add_operation_bytes = 2;
    bytes receiver_pub_key_for_remove_operation_bytes = 3;
    map<string, string> extra_data_map = 4;
}

message OfferPayload {
    enum Direction {
        BUY = 0;
        SELL = 1;
    }

    Direction direction = 1;
    string base_currency_code = 2;
    string counter_currency_code = 3;
    string payment_method_id = 4;
    string country_code = 5;
    repeated string accepted_country_codes = 6;
    string bank_id = 7;
    repeated string accepted_bank_ids = 8;
    repeated NodeAddress arbitrator_node_addresses = 9;
    repeated NodeAddress mediator_node_addresses = 10;
    string id = 11;
    int64 date = 12;
    int64 protocol_version = 13;
    bool use_market_based_price = 14;
    int64 price = 15;
    double market_price_margin = 16;
    int64 amount = 17;
    int64 min_amount = 18;
    NodeAddress maker_node_address = 19;
    PubKeyRing pub_key_ring = 20;
    string maker_payment_account_id = 21;
    string offer_fee_payment_tx_id = 22;
    string version_nr = 23;
    int64 block_height_at_offer_creation = 24;
    int64 tx_fee = 25;
    int64 maker_fee = 26;
    int64 buyer_security_deposit = 27;
    int64 seller_security_deposit = 28;
    int64 max_trade_limit = 29;
    int64 max_trade_period = 30;
    bool use_auto_close = 31;
    bool use_re_open_after_auto_close = 32;
    int64 lower_close_price = 33;
    int64 upper_close_price = 34;
    bool is_private_offer = 35;
    string hash_of_challenge = 36;
    map<string, string> extra_data_map = 37;
    bool is_currency_for_maker_fee_btc = 38;
}


///////////////////////////////////////////////////////////////////////////////////////////
// Dispute payload
///////////////////////////////////////////////////////////////////////////////////////////


message Dispute {
    string trade_id = 1;
    string id = 2;
    int32 trader_id = 3;
    bool dispute_opener_is_buyer = 4;
    bool dispute_opener_is_maker = 5;
    int64 opening_date = 6;
    PubKeyRing trader_pub_key_ring = 7;
    int64 trade_date = 8;
    Contract contract = 9;
    bytes contract_hash = 10;
    bytes deposit_tx_serialized = 11;
    bytes payout_tx_serialized = 12;
    string deposit_tx_id = 13;
    string payout_tx_id = 14;
    string contract_as_json = 15;
    string maker_contract_signature = 16;
    string taker_contract_signature = 17;
    PubKeyRing arbitrator_pub_key_ring = 18;
    bool is_support_ticket = 19;
    repeated DisputeCommunicationMessage dispute_communication_messages = 20;
    bool is_closed = 21;
    DisputeResult dispute_result = 22;
    string dispute_payout_tx_id = 23;
}

message Attachment {
    bytes bytes = 1;
    string file_name = 2;
}

message DisputeResult {
    enum Winner {
        BUYER = 0;
        SELLER = 1;
    }

    // only append new values as we use the ordinal value
    enum Reason {
        OTHER = 0;
        BUG = 1;
        USABILITY = 2;
        SCAM = 3;
        PROTOCOL_VIOLATION = 4;
        NO_REPLY = 5;
        BANK_PROBLEMS = 6;
    }

    string trade_id = 1;
    int32 trader_id = 2;
    Winner winner = 3;
    int32 reason_ordinal = 4;

    bool tamper_proof_evidence = 5;
    bool id_verification = 6;
    bool screen_cast = 7;
    string summary_notes = 8;
    DisputeCommunicationMessage dispute_communication_message = 9;
    bytes arbitrator_signature = 10;
    int64 buyer_payout_amount = 11;
    int64 seller_payout_amount = 12;
    bytes arbitrator_pub_key = 13;
    int64 close_date = 14;
    bool is_loser_publisher = 15;
}


///////////////////////////////////////////////////////////////////////////////////////////
// Trade payload
///////////////////////////////////////////////////////////////////////////////////////////

message Contract {
    OfferPayload offer_payload = 1;
    int64 trade_amount = 2;
    int64 trade_price = 3;
    string taker_fee_tx_id = 4;
    NodeAddress arbitrator_node_address = 5;
    bool is_buyer_maker_and_seller_taker = 6;
    string maker_account_id = 7;
    string taker_account_id = 8;
    PaymentAccountPayload maker_payment_account_payload = 9;
    PaymentAccountPayload taker_payment_account_payload = 10;
    PubKeyRing maker_pub_key_ring = 11;
    PubKeyRing taker_pub_key_ring = 12;
    NodeAddress buyer_node_address = 13;
    NodeAddress seller_node_address = 14;
    string maker_payout_address_string = 15;
    string taker_payout_address_string = 16;
    bytes maker_btc_pub_key = 17;
    bytes taker_btc_pub_key = 18;
    NodeAddress mediator_node_address = 19;
}

message RawTransactionInput {
    int64 index = 1;
    bytes parent_transaction = 2;
    int64 value = 3;
}

enum AvailabilityResult {
    UNKNOWN_FAILURE = 0; // 0 is the default value when something goes wrong, map it to failure
    AVAILABLE = 1;
    OFFER_TAKEN = 2;
    PRICE_OUT_OF_TOLERANCE = 3;
    MARKET_PRICE_NOT_AVAILABLE = 4;
    NO_ARBITRATORS = 5;
    NO_MEDIATORS = 6;
    USER_IGNORED = 7;
}


///////////////////////////////////////////////////////////////////////////////////////////
// PaymentAccount payload
///////////////////////////////////////////////////////////////////////////////////////////


message PaymentAccountPayload {
    string id = 1;
    string payment_method_id = 2;
    int64 max_trade_period = 3;
    oneof message {
        AliPayAccountPayload ali_pay_account_payload = 4;
        ChaseQuickPayAccountPayload chase_quick_pay_account_payload = 5;
        ClearXchangeAccountPayload clear_xchange_account_payload = 6;
        CountryBasedPaymentAccountPayload country_based_payment_account_payload = 7;
        CryptoCurrencyAccountPayload crypto_currency_account_payload = 8;
        FasterPaymentsAccountPayload faster_payments_account_payload = 9;
        InteracETransferAccountPayload interac_e_transfer_account_payload = 10;
        OKPayAccountPayload o_k_pay_account_payload = 11;
        PerfectMoneyAccountPayload perfect_money_account_payload = 12;
        SwishAccountPayload swish_account_payload = 13;
        USPostalMoneyOrderAccountPayload u_s_postal_money_order_account_payload = 14;
    }
}

message AliPayAccountPayload {
    string account_nr = 1;
}

message ChaseQuickPayAccountPayload {
    string email = 1;
    string holder_name = 2;
}

message ClearXchangeAccountPayload {
    string holder_name = 1;
    string email_or_mobile_nr = 2;
}

message CountryBasedPaymentAccountPayload {
    string countryCode = 1;
    oneof message {
        BankAccountPayload bank_account_payload = 2;
        CashDepositAccountPayload cash_deposit_account_payload = 3;
        SepaAccountPayload sepa_account_payload = 4;
    }
}

message BankAccountPayload {
    string holder_name = 1;
    string bank_name = 2;
    string bank_id = 3;
    string branch_id = 4;
    string account_nr = 5;
    string account_type = 6;
    string holder_tax_id = 7;
    oneof message {
        NationalBankAccountPayload national_bank_account_payload = 8;
        SameBankAccountPayload same_bank_accont_payload = 9;
        SpecificBanksAccountPayload specific_banks_account_payload = 10;
    }
}

message NationalBankAccountPayload {
}

message SameBankAccountPayload {
}

message SpecificBanksAccountPayload {
    repeated string accepted_banks = 1;
}

message CashDepositAccountPayload {
    string holder_name = 1;
    string holder_email = 2;
    string bank_name = 3;
    string bank_id = 4;
    string branch_id = 5;
    string account_nr = 6;
    string account_type = 7;
    string requirements = 8;
    string holder_tax_id = 9;
}

message SepaAccountPayload {
    string holder_name = 1;
    string iban = 2;
    string bic = 3;
    repeated string accepted_country_codes = 4;
}

message CryptoCurrencyAccountPayload {
    string address = 1;
}

message FasterPaymentsAccountPayload {
    string sort_code = 1;
    string account_nr = 2;
}

message InteracETransferAccountPayload {
    string email = 1;
    string holder_name = 2;
    string question = 3;
    string answer = 4;
}

message OKPayAccountPayload {
    string account_nr = 1;
}

message PerfectMoneyAccountPayload {
    string account_nr = 1;
}

message SwishAccountPayload {
    string mobile_nr = 1;
    string holder_name = 2;
}

message USPostalMoneyOrderAccountPayload {
    string postal_address = 1;
    string holder_name = 2;
}


///////////////////////////////////////////////////////////////////////////////////////////
// Misc
///////////////////////////////////////////////////////////////////////////////////////////


message PrivateNotificationPayload {
    string message = 1;
    string signature_as_base64 = 2;
    bytes public_key_bytes = 3;
}



///////////////////////////////////////////////////////////////////////////////////////////
// Persistable
///////////////////////////////////////////////////////////////////////////////////////////

message Persistable {
    int64 local_db_version = 1;
    oneof message {
        AddressEntryList address_entry_list = 2;
        ViewPathAsString view_path_as_string = 3;
        PeersList peers_list = 4;
        Preferences preferences = 5;
        User user = 6;
        CompensationRequestPayload compensation_request_payload = 7;
        SequenceNumberMap sequence_number_map = 8;
        PersistedEntryMap persisted_entry_map = 9;
        TradeStatisticsList trade_statistics_list = 10;
        VoteItemsList vote_items_list = 11;
        TradableList tradable_list = 12;
    }
}


///////////////////////////////////////////////////////////////////////////////////////////
// Preferences
///////////////////////////////////////////////////////////////////////////////////////////

message Preferences {
    string user_language = 1;
    Country user_country = 2;
    repeated TradeCurrency fiat_currencies = 5;
    repeated TradeCurrency crypto_currencies = 6;
    BlockChainExplorer block_chain_explorer_main_net = 7;
    BlockChainExplorer block_chain_explorer_test_net = 8;
    string backup_directory = 9;
    bool auto_select_arbitrators = 10;
    map<string, bool> dont_show_again_map = 11;
    bool tac_accepted = 12;
    bool use_tor_for_bitcoin_j = 13;
    bool show_own_offers_in_offer_book = 14;
    BlockChainExplorer bsq_block_chain_explorer = 15;
    TradeCurrency preferred_trade_currency = 16;
    int64 withdrawal_tx_fee_in_bytes = 17;
    bool use_custom_withdrawal_tx_fee = 18;
    double max_price_distance_in_percent = 19;
    string offer_book_chart_screen_currency_code = 20;
    string trade_charts_screen_currency_code = 21;
    string buy_screen_currency_code = 22;
    string sell_screen_currency_code = 23;
    int32 trade_statistics_tick_unit_index = 24;
    bool resync_Spv_requested = 25;
    bool sort_market_currencies_numerically = 26;
    bool use_percentage_based_price = 27;
    map<string, string> peer_tag_map = 28;
    string bitcoin_nodes = 29;
    repeated string ignore_traders_list = 30;
    string directory_chooser_path = 31;
    int64 buyer_security_deposit_as_long = 32;
    string btc_denomination = 33;
    bool use_animations = 34;
    PaymentAccount selectedPayment_account_for_createOffer = 35;
    bool pay_fee_in_Btc = 36;
}


///////////////////////////////////////////////////////////////////////////////////////////
// User
///////////////////////////////////////////////////////////////////////////////////////////

message User {
    string account_id = 1;
    repeated PaymentAccount payment_accounts = 2;
    PaymentAccount current_payment_account = 3;
    repeated string accepted_language_locale_codes = 4;
    Alert developers_alert = 5;
    Alert displayed_alert = 6;
    Filter developers_filter = 7;
    repeated Arbitrator accepted_arbitrators = 8;
    repeated Mediator accepted_mediators = 9;
    Arbitrator registered_arbitrator = 10;
    Mediator registered_mediator = 11;
}


///////////////////////////////////////////////////////////////////////////////////////////
// AddressEntry
///////////////////////////////////////////////////////////////////////////////////////////

message AddressEntry {
    enum Context {
        ARBITRATOR = 0;
        AVAILABLE = 1;
        OFFER_FUNDING = 2;
        RESERVED_FOR_TRADE = 3;
        MULTI_SIG = 4;
        TRADE_PAYOUT = 5;
    }

    string offer_id = 7;
    Context context = 8;
    bytes pub_key = 9;
    bytes pub_key_hash = 10;
    int64 coin_locked_in_multi_sig = 11;
}

message AddressEntryList {
    repeated AddressEntry address_entry = 1;
}


///////////////////////////////////////////////////////////////////////////////////////////
// Offer/Trade
///////////////////////////////////////////////////////////////////////////////////////////

message Offer {
    enum State {
       UNDEFINED = 0;
       OFFER_FEE_PAID = 1;
       AVAILABLE = 2;
       NOT_AVAILABLE = 3;
       REMOVED = 4;
       MAKER_OFFLINE = 5;
    }

    OfferPayload offer_payload = 1;
}

message OpenOffer {
    enum State {
        UNKNOWN_FAILURE = 0;
        AVAILABLE = 1;
        RESERVED = 2;
        CLOSED = 3;
        CANCELED = 4;
    }

    Offer offer = 1;
    State state = 2;
}

message Tradable {
    oneof message {
        OpenOffer open_offer = 1;
        BuyerAsMakerTrade buyer_as_maker_trade = 2;
        BuyerAsTakerTrade  buyer_as_taker_trade= 3;
        SellerAsMakerTrade seller_as_maker_trade = 4;
        SellerAsTakerTrade seller_as_taker_trade = 5;
    }
}

message TradableList {
    repeated Tradable tradable = 1;
}

message Trade {
    enum State {
        UNKNOWN_FAILURE = 0;
        PREPARATION = 1;
        TAKER_FEE_PAID = 2;
        OFFERER_SENT_PUBLISH_DEPOSIT_TX_REQUEST = 3;
        TAKER_PUBLISHED_DEPOSIT_TX = 4;
        DEPOSIT_SEEN_IN_NETWORK = 5;
        TAKER_SENT_DEPOSIT_TX_PUBLISHED_MSG = 6;
        OFFERER_RECEIVED_DEPOSIT_TX_PUBLISHED_MSG = 7;
        DEPOSIT_CONFIRMED_IN_BLOCK_CHAIN = 8;

        BUYER_CONFIRMED_FIAT_PAYMENT_INITIATED = 9;
        BUYER_SENT_FIAT_PAYMENT_INITIATED_MSG = 10;
        SELLER_RECEIVED_FIAT_PAYMENT_INITIATED_MSG = 11;

        SELLER_CONFIRMED_FIAT_PAYMENT_RECEIPT = 12;
        SELLER_SENT_FIAT_PAYMENT_RECEIPT_MSG = 13;
        BUYER_RECEIVED_FIAT_PAYMENT_RECEIPT_MSG = 14;

        BUYER_COMMITTED_PAYOUT_TX = 15;
        BUYER_STARTED_SEND_PAYOUT_TX = 16;
        SELLER_RECEIVED_AND_COMMITTED_PAYOUT_TX = 17;
        PAYOUT_BROAD_CASTED = 18;
        WITHDRAW_COMPLETED = 19;
    }

    enum Phase {
        PHASE_UNKNOWN_FAILURE = 0;
        PHASE_PREPARATION = 1;
        PHASE_TAKER_FEE_PAID = 2;
        DEPOSIT_REQUESTED = 3;
        DEPOSIT_PAID = 4;
        FIAT_SENT = 5;
        FIAT_RECEIVED = 6;
        PAYOUT_PAID = 7;
        WITHDRAWN = 8;
        DISPUT = 9;
    }

    enum DisputeState {
        TRADED_DISPUTE_STATE_UNKNOWN_FAILURE = 0;
        NONE = 1;
        DISPUTE_REQUESTED = 2;
        DISPUTE_STARTED_BY_PEER = 3;
        DISPUTE_CLOSE = 4;
    }

    enum TradePeriodState {
        TRADE_PERIOD_STATE_UNKNOWN_FAILURE = 0;
        NORMAL = 1;
        HALF_REACHED = 2;
        TRADE_PERIOD_OVER = 3;
    }

    Offer offer = 1;
    ProcessModel process_model = 2;
    string taker_fee_tx_id = 3;
    string deposit_tx_id = 4;
    string payout_tx_id = 5;
    int64 trade_amount_as_long = 6;
    int64 tx_fee_as_long = 7;
    int64 taker_fee_as_long = 8;
    int64 take_offer_date = 9;
    bool is_currency_for_taker_fee_btc = 10;
    int64 trade_price = 11;
    NodeAddress trading_peer_node_address = 12;
    State state = 13;
    DisputeState dispute_state = 14;
    TradePeriodState trade_period_state = 15;
    Contract contract = 16;
    string contract_as_json = 17;
    bytes contract_hash = 18;
    string taker_contract_signature = 19;
    string maker_contract_signature = 20;
    NodeAddress arbitrator_node_address = 21;
    NodeAddress mediator_node_address = 22;
    bytes arbitrator_btc_pub_key = 23;
    string taker_payment_account_id = 24;
    string error_message = 25;
}

message BuyerAsMakerTrade {
    Trade trade = 1;
}

message BuyerAsTakerTrade {
    Trade trade = 1;
}

message SellerTrade {
    Trade trade = 1;
}

message SellerAsMakerTrade {
    Trade trade = 1;
}

message SellerAsTakerTrade {
    Trade trade = 1;
}

message ProcessModel {
     TradingPeer trading_peer = 1;
     string offer_id = 2;
     string account_id = 3;
     PubKeyRing pub_key_ring = 4;
     string take_offer_fee_tx_id = 5;
     bytes payout_tx_signature = 6;
     repeated NodeAddress taker_accepted_arbitrator_node_addresses = 7;
     repeated NodeAddress taker_accepted_mediator_node_addresses = 8;
     bytes prepared_deposit_tx = 9;
     repeated RawTransactionInput raw_transaction_inputs = 10;
     int64 change_output_value = 11;
     string change_output_address = 12;
     bool use_savings_wallet = 13;
     int64 funds_needed_for_trade_as_long = 14;
     bytes my_multi_sig_pub_key = 15;
     NodeAddress temp_trading_peer_node_address = 16;
}

message TradingPeer {
    string account_id = 1;
    PaymentAccountPayload payment_account_payload = 2;
    string payout_address_string = 3;
    string contract_as_json = 4;
    string contract_signature = 5;
    bytes signature = 6;
    PubKeyRing pub_key_ring = 7;
    bytes multi_sig_pub_key = 8;
    repeated RawTransactionInput raw_transaction_inputs = 9;
    int64 change_output_value = 10;
    string change_output_address = 11;
}

message TradeStatisticsList {
    repeated TradeStatistics trade_statistics = 1;
}


///////////////////////////////////////////////////////////////////////////////////////////
// DAO
///////////////////////////////////////////////////////////////////////////////////////////

message VoteItem {
    enum VotingType {
        UNKNOWN_FAILURE = 0;
        CREATE_OFFER_FEE_IN_BTC = 1;
        TAKE_OFFER_FEE_IN_BTC = 2;
        CREATE_OFFER_FEE_IN_BSQ = 3;
        TAKE_OFFER_FEE_IN_BSQ = 4;
        CREATE_COMPENSATION_REQUEST_FEE_IN_BSQ = 5;
        VOTING_FEE_IN_BSQ = 6;
        COMPENSATION_REQUEST_PERIOD_IN_BLOCKS = 7;
        VOTING_PERIOD_IN_BLOCKS = 8;
        FUNDING_PERIOD_IN_BLOCKS = 9;
        BREAK_BETWEEN_PERIODS_IN_BLOCKS = 10;
        QUORUM_FOR_COMPENSATION_REQUEST_VOTING = 11;
        QUORUM_FOR_PARAMETER_VOTING = 12;
        MIN_BTC_AMOUNT_COMPENSATION_REQUEST = 13;
        MAX_BTC_AMOUNT_COMPENSATION_REQUEST = 14;
        CONVERSION_RATE = 15;
        COMP_REQUEST_MAPS = 16;
    }

    VotingType voting_type = 1;
    string name = 2;
    int64 default_value = 3;
    bool has_voted = 4;
    uint32 value = 5; // https://stackoverflow.com/questions/17594881/store-a-single-byte-in-a-protobuf-message
}

message VoteItemsList {
    repeated VoteItem vote_item = 1;
}

message CompensationRequest {
    CompensationRequestPayload compensation_request_payload = 1;
    bool accepted = 2;
    int64 funds_received = 3;
    bool in_vote_period = 4;
    bool in_funding_period = 5;
    bool closed = 6;
    bool waiting_for_voting_period = 7;
}

message CompensationRequestVoteItem {
    CompensationRequest compensation_request = 1;
    bool decline_vote = 2;
    bool accepted_vote = 3;
    bool has_voted = 4;
}

message CompensationRequestVoteItemCollection {
    repeated CompensationRequestVoteItem compensation_request_vote_item = 1;
}


///////////////////////////////////////////////////////////////////////////////////////////
// Misc
///////////////////////////////////////////////////////////////////////////////////////////

message Transaction {
   bytes hash = 1;
}

message PeersList {
    repeated Peer peers = 1;
}

message PersistedEntryMap {
    map<string, ProtectedStorageEntry> persisted_entry_map = 1;
}

message SequenceNumberMap {
    repeated SequenceNumberEntry sequence_number_entries = 1;
}

message SequenceNumberEntry {
    ByteArray bytes = 1;
    MapValue map_value = 2;
}

message MapValue {
    int32 sequence_nr = 1;
    int64 time_stamp = 2;
}

message BlockChainExplorer {
    string name = 1;
    string tx_url = 2;
    string address_url = 3;
}

message ByteArray {
    bytes bytes = 1;
}

message ViewPathAsString {
    repeated string view_path = 1;
}

message DisputeList {
    repeated Dispute dispute = 1;
}

message PaymentAccount {
    string id = 1;
    int64 creation_date = 2;
    PaymentMethod payment_method = 3;
    string account_name = 4;
    repeated TradeCurrency trade_currencies = 5;
    TradeCurrency selected_trade_currency = 6;
    PaymentAccountPayload payment_account_payload = 7;
}

message PaymentMethod {
    string id = 1;
    int64 max_trade_period = 2;
    int64 max_trade_limit = 3;
}


// Currency

message Currency {
    string currency_code = 1;
}

message TradeCurrency {
    string code = 1;
    string name = 2;
    string symbol = 3;
    oneof message {
        CryptoCurrency crypto_currency = 4;
        FiatCurrency fiat_currency = 5;
    }
}

message CryptoCurrency {
    bool is_asset = 1;
}

message FiatCurrency {
    Currency currency = 1;
}


// Locale

message Locale {
    string language = 1;
    string country = 2;
    string variant = 3;
}

message Country {
    string code = 1;
    string name = 2;
    Region region = 3;
}

message Region {
    string code = 1;
    string name = 2;
}


///////////////////////////////////////////////////////////////////////////////////////////
// Mock
///////////////////////////////////////////////////////////////////////////////////////////

message MockMailboxPayload {
    int32 message_version = 1;
    string msg = 2;
    NodeAddress sender_node_address = 3;
    string uid = 4;
}

message MockPayload {
    string message_version = 1;
    string msg = 2;
}